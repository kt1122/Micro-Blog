{{! Partial for a single post }}
<div class="post" data-id="{{id}}"> 
    <div class="post-text">
        <div class="post-avatar-container">
            <!-- the user's avatar -->
            <img src="/avatar/{{username}}" alt="User Avatar" class="post-avatar">
        </div>
        <div class="post-content preserve-newlines">
            <h4 class="post-title">{{title}}</h4>
            <!-- the post -->
            <p>{{content}}</p>
        </div>
    </div>

    <div class="post-status-bar">
        <!-- everything that is shown in the status bar -->
        <!-- Heart = ‚ô• -->
        <!-- font awesome  trashcan = <i class="fas fa-trash-alt"> </i>-->
        <hr class="solid class-divider">
        <div class="status-display">
            {{#ifCond username user.username}}
                <button onclick="handleDeleteClick(event)" data-id="{{id}}" class="delete-button"><i class="fas fa-trash-alt"></i></button> 
            {{else}}
                <button onclick="handleLikeClick(event)" data-id="{{id}}" class="like-button">‚ô•</button> 
            {{/ifCond}}
            <p class="likes-count">{{likes}} likes</p>
            <p>Posted By {{username}} on {{timestamp}}</p>
        </div>
        <button onclick="handlePigLatinClick(event)" id="pigLatin" data-id="{{id}}" data-translated="false">To PigLatin! üê∑</button>
    </div>
</div>

<script>

    function handleLikeClick(event) {
        const buttonElement = event.target;
        buttonElement.classList.add('selected-btn');
        const postId = buttonElement.getAttribute('data-id');

        fetch(`/like/${postId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the likes count
                const likesCountElement = document.querySelector(`.post[data-id="${postId}"] .likes-count`);
                likesCountElement.innerText = `${data.likes} likes`;
            } else {
                console.log(data.message || 'Failed to like the post.');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        buttonElement.classList.add('selected-btn'); 
        const postId = buttonElement.getAttribute('data-id'); 

        fetch(`/delete/${postId}`, {
            method: 'POST', 
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelector(`.post[data-id="${postId}"]`).remove();
            } else {
                console.log('Failed to delete the post.');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function translateToPigLatin(text) {
        // Regular expression to identify punctuation at the end of a word
        const punctuationRegex = /[.,/#!$%\^&\*;:{}=\-_`~()?\[\]"'<>]+$/;

        return text.split(' ').map(word => {
            let endPunctuation = '';
            const punctuationMatch = word.match(punctuationRegex);

            // Check if there's punctuation at the end of the word
            if (punctuationMatch) {
                endPunctuation = punctuationMatch[0];
                word = word.slice(0, -endPunctuation.length); // Remove the punctuation from the word
            }

            const firstVowel = word.match(/[aeiou]/i);
            if (firstVowel) {
                const vowelIndex = word.indexOf(firstVowel[0]);
                if (vowelIndex === 0) {
                    return word + 'way' + endPunctuation;  // Add punctuation back after translation
                } else {
                    return word.slice(vowelIndex) + word.slice(0, vowelIndex) + 'ay' + endPunctuation;  // Add punctuation back after translation
                }
            }
            return word + endPunctuation; // Return the word with punctuation if no translation occurred
    }).join(' ');
    }

    function handlePigLatinClick(event) {
        const pigBtnElement = event.target;
        const postId = pigBtnElement.getAttribute('data-id');
        const postContentElement = document.querySelector(`.post[data-id="${postId}"] .post-content p`);

        if (postContentElement) {
            let isTranslated = pigBtnElement.getAttribute('data-translated') === 'true';
            if (!isTranslated) {
                const translatedText = translateToPigLatin(postContentElement.innerText);
                postContentElement.innerText = translatedText;
                pigBtnElement.setAttribute('data-translated', 'true');
                pigBtnElement.innerText = "To English üî§"; // Change button text to 'To English'
            } else {
                // Fetch original text from the server
        fetch(`/post/${postId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    postContentElement.innerText = data.content;
                    pigBtnElement.setAttribute('data-translated', 'false');
                    pigBtnElement.innerText = "To Pig Latin üê∑"; // Change button text to 'To Pig Latin'
                } else {
                    console.error(data.message || 'Failed to fetch the original post content.');
                }
            })
            .catch(error => console.error('Error:', error));
            }
        }
    }

   
</script>
